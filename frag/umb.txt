//this of FabriceNeyret2, very short template
//M - sdf function 

#define PI  3.14159265359
#define TAU 6.28318530718

#define N        normalize
#define r(f)     mat2( cos(f + vec4(0,33,11,0)) )   // rotation 
#define rot(f) mat2(cos(f), -sin(f), sin(f), cos(f))
float t;


vec3 getSg(vec3 p, float nseg) {
    float fi = mod(atan(p.y, p.x), TAU);
    fi = mod(fi + PI / nseg, TAU);
    float n = floor(fi / TAU * nseg);
    p.xy *= rot(-n * TAU / nseg);
    return p;
}
float sdSegment(in vec2 p, in vec2 a, in vec2 b) {
    vec2 pa = p - a, ba = b - a;
    float h = clamp(dot(pa, ba) / dot(ba, ba), 0.0, 1.0);
    return length(pa - ba * h);
}



float M(vec3 p)                                     // map: sdCeli
{
    p.yz *= r( t);
    p.xy *= r(-t);
    p.yz*=rot(PI/2.);
    float n1 = 14., R = 2., h = 2.1;
    float d3 = length(vec2(length(vec2(p.xy)), max(abs(p.z) - h, 0.))) - 0.07;

    p = getSg(p, n1);
    vec2 a0 = vec2(R * cos(PI / n1), R * sin(PI / n1)*sign(p.y));
    float d2 = sdSegment(p.xy, a0, vec2(0.));
    d2 = length(vec2(d2, p.z)) - 0.02;

    vec3 p0 = normalize(p);
    
    vec2 a = vec2(R * cos(PI / n1), R * sin(PI / n1)), b = vec2(R * cos(PI / n1), -R * sin(PI / n1));
    float t = 0.;

    if(p.z > 0.) {
        t = sqrt(R * R / (p0.z * p0.z + p0.x * p0.x / cos(PI / n1) / cos(PI / n1)));
        float l = p0.x * t / cos(PI / n1);
        a = vec2(l * cos(PI / n1), l * sin(PI / n1));
        b = vec2(l * cos(PI / n1), -l * sin(PI / n1));
    }
    float d0 = sdSegment(p.xy, a, b);
    d0 = 0.95*length(vec2(d0, p.z - p0.z * t))-0.02;

    p.xy *= rot(-PI / n1 * sign(p.y));
    float d = abs(length(p.xz) - R);
    if(p.z < 0.)
        d = length(p.xz - vec2(R, 0));
    d = length(vec2(d, p.y)) - 0.03;
    return min(min(min(d, d0), d3), d2);
}

void mainImage( out vec4 O, vec2 U )
{
    vec2 m, R = iResolution.xy, e = vec2(1,-1)/1e4;
    t = iMouse.z > 0. ? m = ( 2.*iMouse.xy - R ) / R.y, 0. // mouse or auto-demo
                      : iTime;
  
    vec3 p; p.z = 4.;                               // camera
    p.yz *= r(m.y*3.14);                            // camera rotation
    p.xz *= r(m.x*6.28);
   
    int k;     // antialiasing AxA
    
    #if HW_PERFORMANCE==0
    #define A 1
    #else
    #define A 2
    #endif
    
    for( O *= 0.; k < A*A; k++ )
    {   vec3 p = p, 
             n = N(-p),
             r = N(vec3(n.z,0,-n)),                 // ray direction
             d = N(   mat3( r, cross(n,r), n )
                    * vec3( ( 2.*( U +vec2(k%A,k/A)/float(A)-.5 ) - R ) / R.y, 1.5 ) 
                  );
   
        float t, E = .001, h = E;                   // --- ray-march
        for (int i; i++ < 128 && h >= E && t < 20. ; )
            t += h = M( p += d*h );    
        
        t < 20. ?                                    // if hit:
            n = N( e.xyy* M(p + e.xyy ) +           // normal
                   e.yyx* M(p + e.yyx ) + 
                   e.yxy* M(p + e.yxy ) + 
                   e.xxx* M(p + e.x   ) ),  
            O +=  vec4(.2  ,.3,.4 ,0) * (.5 + .5*dot( n, vec3(0, .7,-.7)) )     // ambiant
                + vec4(.85,.75,.65,0) * max(     dot( n, vec3(0, .7, .7)), .2 ) // diffuse
          : O ;
    }

    O = sqrt( O ) / float(A);                       // sRGB
}